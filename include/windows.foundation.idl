/*
 * Copyright 2015 Jacek Caban for CodeWeavers
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

#ifdef __WIDL__
#pragma winrt ns_prefix
#endif

import "inspectable.idl";
import "asyncinfo.idl";
import "windowscontracts.idl";
/* import "eventtoken.idl"; */
/* import "ivectorchangedeventargs.idl"; */

typedef struct EventRegistrationToken
{
    __int64 value;
} EventRegistrationToken;

namespace Windows {
    namespace Foundation {
        [contract(Windows.Foundation.FoundationContract, 1.0)]
        enum PropertyType {
            Empty       = 0,
            UInt8       = 1,
            Int16       = 2,
            UInt16      = 3,
            Int32       = 4,
            UInt32      = 5,
            Int64       = 6,
            UInt64      = 7,
            Single      = 8,
            Double      = 9,
            Char16      = 10,
            Boolean     = 11,
            String      = 12,
            Inspectable = 13,
            DateTime    = 14,
            TimeSpan    = 15,
            Guid        = 16,
            Point       = 17,
            Size        = 18,
            Rect        = 19,
            OtherType   = 20,
            UInt8Array       = 1025,
            Int16Array       = 1026,
            UInt16Array      = 1027,
            Int32Array       = 1028,
            UInt32Array      = 1029,
            Int64Array       = 1030,
            UInt64Array      = 1031,
            SingleArray      = 1032,
            DoubleArray      = 1033,
            Char16Array      = 1034,
            BooleanArray     = 1035,
            StringArray      = 1036,
            InspectableArray = 1037,
            DateTimeArray    = 1038,
            TimeSpanArray    = 1039,
            GuidArray        = 1040,
            PointArray       = 1041,
            SizeArray        = 1042,
            RectArray        = 1043,
            OtherTypeArray   = 1044
        };

        [contract(Windows.Foundation.FoundationContract, 1.0)]
        struct Point {
            FLOAT X;
            FLOAT Y;
        };

        [contract(Windows.Foundation.FoundationContract, 1.0)]
        struct Size {
            FLOAT Width;
            FLOAT Height;
        };

        [contract(Windows.Foundation.FoundationContract, 1.0)]
        struct Rect {
            FLOAT X;
            FLOAT Y;
            FLOAT Width;
            FLOAT Height;
        };

        [contract(Windows.Foundation.FoundationContract, 1.0)]
        struct DateTime {
            INT64 UniversalTime;
        };

        [contract(Windows.Foundation.FoundationContract, 1.0)]
        struct TimeSpan {
            INT64 Duration;
        };

        [
            contract(Windows.Foundation.FoundationContract, 1.0),
            uuid(96369f54-8eb6-48f0-abce-c1b211e627c3)
        ]
        interface IStringable : IInspectable
        {
            HRESULT ToString([out, retval] HSTRING *value);
        }

#ifdef __WIDL__
        [
            contract(Windows.Foundation.FoundationContract, 1.0),
            uuid(9de1c535-6ae1-11e0-84e1-18a905bcc53f)
        ]
        delegate void EventHandler<T>([in] IInspectable *sender, [in] T args);

        [
            contract(Windows.Foundation.FoundationContract, 1.0),
            uuid(9de1c534-6ae1-11e0-84e1-18a905bcc53f)
        ]
        delegate void TypedEventHandler<TSender, TResult>([in] TSender sender, [in] TResult args);

        interface IAsyncOperation<TResult>;

        [
            contract(Windows.Foundation.FoundationContract, 1.0),
            uuid(fcdcf02c-e5d8-4478-915a-4d90b74b83a5)
        ]
        delegate void AsyncOperationCompletedHandler<TResult>([in] IAsyncOperation<TResult> *info, [in] AsyncStatus status);

        [
            contract(Windows.Foundation.FoundationContract, 1.0),
            uuid(9fc2b0bb-e446-44e2-aa61-9cab8f636af2)
        ]
        interface IAsyncOperation<TResult> : IInspectable
        {
            [propput] HRESULT Completed([in] AsyncOperationCompletedHandler<TResult> *handler);
            [propget] HRESULT Completed([out, retval] AsyncOperationCompletedHandler<TResult> **handler);
            HRESULT GetResults([out, retval] TResult **results);
        }

        namespace Collections
        {
            [
                contract(Windows.Foundation.FoundationContract, 1.0),
                uuid(6a79e863-4300-459a-9966-cbb660963ee1)
            ]
            interface IIterator<T> : IInspectable
            {
                [propget] HRESULT Current([out, retval] T *value);
                [propget] HRESULT HasCurrent([out, retval] BOOL *value);
                HRESULT MoveNext([out, retval] BOOL *value);
                HRESULT GetMany([in] UINT32 count, [out] T *items, [out, retval] UINT32 *value);
            }

            [
                contract(Windows.Foundation.FoundationContract, 1.0),
                uuid(faa585ea-6214-4217-afda-7f46de5869b3)
            ]
            interface IIterable<T> : IInspectable
            {
                HRESULT First([out, retval] Windows.Foundation.Collections.IIterator<T> **value);
            }

            [
                contract(Windows.Foundation.FoundationContract, 1.0),
                uuid(bbe1fa4c-b0e3-4583-baef-1f1b2e483e56)
            ]
            interface IVectorView<T> : IInspectable
            {
                HRESULT GetAt([in] ULONG index, [out, retval] T *value);
                [propget] HRESULT Size([out, retval] ULONG *value);
                HRESULT IndexOf([in, optional] T element, [out] ULONG *index, [out, retval] BOOLEAN *value);
                HRESULT GetMany([in] ULONG start_index, [out] T *items, [out, retval] ULONG *value);
            }
        }
#endif
    }
}

namespace Windows {
    namespace Foundation {
        declare {
            interface Windows.Foundation.Collections.IVectorView<HSTRING>;
            interface Windows.Foundation.AsyncOperationCompletedHandler<boolean>;
            interface Windows.Foundation.IAsyncOperation<boolean>;
        }
    }
}
